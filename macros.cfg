[delayed_gcode _INIT_TIMELAPSE_CHECK_TIME]
initial_duration: 1
gcode: SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=check_time VALUE=0.5 

[gcode_macro update_mesh]
gcode:
  HOME
  bed_mesh_calibrate
  G1 X0 Y0 Z10 F4200
  save_config

[pause_resume]
recover_velocity: 700

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        ; M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 5
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_minimum.x|float %}
  {% set y_park = printer.toolhead.axis_maximum.y|float %}
  {% set z_park_delta = 10.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro M600]
gcode:
    PAUSE
    MR_NOTIFY TITLE="$printer_name está aguardando troca de filamento" MESSAGE="Após realizar a troca confirme com RESUME"

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro _POWER_OFF_PRINTER]
gcode:
  MR_NOTIFY TITLE="$printer_name foi desligada" MESSAGE="Ficou inativa após finalizar impressão"
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}

[delayed_gcode POWER_OFF_PRINTER_CHECK]
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    {% if printer.extruder.temperature < 50.0 and printer.heater_bed.temperature < 90.0 %}
        {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            _POWER_OFF_PRINTER
        {% else %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
        {% endif %}
    {% else %}
        {% if printer.idle_timeout.state == "Printing" %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
        {% else %}
            {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
            {% else %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            {% endif %}
        {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro ACTIVATE_POWER_OFF]
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60

[gcode_macro DEACTIVATE_POWER_OFF]
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=0

[delayed_gcode POWER_OFF_PRINTER_CHECK_ACT]
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30
  {% else %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60
  {% endif %}

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(180)|float %}
    {% set X_MIN = params.X_MIN|default(0)|float %}
    {% set Y_MIN = params.Y_MIN|default(0)|float %}

    {% set X_SAFE = [X_MIN, 30] | max %}
    {% set Y_SAFE = [Y_MIN, 10] | max %}

    M140 S{BED_TEMP} ; Start bed heating
    G28
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP*0.8}
    M104 S200 ; set temporary nozzle temp to prevent oozing during homing
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP-3} MAXIMUM={BED_TEMP+3}
    # PROBE_OUT
    # G4 S10 ; allow partial nozzle warmup
    # HOME ; home all axis
    CALIBRATE_Z
    BED_MESH_CALIBRATE PROFILE=adaptive ADAPTIVE=1
    G92 E0.0 ; reset extruder
    G1 X{X_SAFE-30} Y{Y_SAFE-10} Z2.0 F6000.0 ; position 10mm left from the lower left of the first layer
    M190 S{BED_TEMP} ; Wait for bed to reach temp before proceeding|
    M109 S{EXTRUDER_TEMP}
    G1 Z0.8
    G1 X{X_SAFE} Y{Y_SAFE-10} E30 F360.0 ; extrude 30mm of filament in the y direction
    G92 E0.0 ; reset extruder
    G1 E-0.5 F2100 ; small retraction
    G1 X{X_SAFE+40} Y{Y_SAFE-10} F6000.0 ; move an additional 10mm without extruding
    G92 E0.0 ; reset extruder
    G1 Z3.0 F3000

[gcode_macro END_PRINT]
gcode:
   G91
   # Retract a bit
   G1 E-4 F2700
   G1 E-3 Z0.2 F2400
   G1 X5 Y5 F3000
   # Turn off bed, extruder, and fan
   M140 S0
   M104 S0
   M106 S0
   # Raise nozzle by 10mm
   G1 Z10 F3000
   G90
   # Deliver print
   G1 X0 Y116
   # _TOOLHEAD_PARK_PAUSE_CANCEL
   # Disable steppers
   M84 X Y E
   # Clear bed mesh
   # BED_MESH_CLEAR
   # Turn off gcode offset
   # SET_GCODE_OFFSET Z=0
   # Start auto power-off
   UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30

[gcode_macro PRINT_END]
gcode:
    END_PRINT

[gcode_macro HOME]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

[gcode_macro MR_NOTIFY]
description: Allows you to send a custom notification via Mobileraker without using the M117 command
gcode:
    {% set msg = "MR_NOTIFY:" ~ (params.TITLE ~ "|" if 'TITLE' in params|upper else "") ~ params.MESSAGE %}

    {% if 'MESSAGE' in params|upper %}
        { action_respond_info(msg) }
    {% else %}
        { action_raise_error('Must provide MESSAGE parameter') }
    {% endif %}

[z_calibration]
nozzle_xy_position: 203.5,240.7  # Nozzle XY position for touching the sexbolt
#   A X, Y coordinate (e.g. 100,100) of the nozzle, clicking on the Z endstop.

switch_xy_position: 192,213  # Probe XY position for touching the sexbolt. Ensure only the probe body touches.
#   A X, Y coordinate (e.g. 100,100) of the probe's switch body, clicking on the Z endstop.

bed_xy_position: 117.5,117.5
#   A X, Y coordinate (e.g. 100,100) where the print surface is probed. Adjusted by the probe's offsets.
#   Defaults to zero_reference_position from bed_mesh if configured.

switch_offset=0.41 # Trigger offset (Omron typically 0.5)
#   Larger values position the nozzle closer to the bed. Determined manually.

offset_margins: -0.5,0.5
#   Min/max margins allowed for the calculated offset. Stops if outside this range.

samples: 3  # Inherits default from "probe:samples"
samples_tolerance: 0.01  # Inherits default from "probe:samples_tolerance"
#samples_tolerance_retries: ...  # Inherits default from "probe:samples_tolerance_retries"
#samples_result: ...  # Inherits default from "probe:samples_result"

#safe_z_height: 6  # Absolute Z height before next move (replaces deprecated 'clearance')
#   Default is 2 * z_offset from probe's config. Minimum 3mm.

speed: 200  # XY movement speed (overrides default 50 mm/s)

#lift_speed: ...  # Inherits default from "probe:lift_speed"
#probing_speed: ...  # Inherits default from "stepper_z:homing_speed"
#probing_second_speed: ...  # Inherits default from "stepper_z:second_homing_speed"
#probing_retract_dist: ...  # Inherits default from "stepper_z:homing_retract_dist"
#probing_first_fast: false  # Inherits default behavior

start_gcode: NOZZLE_BRUSH  # Macro to clean nozzle before calibration
#   Executes before calibration (e.g., attach probe).

before_switch_gcode: _Attach_Probe  # Attach probe before switch probing
#   Runs before mag-probe probing to avoid extra travel.

#end_gcode: Dock_Probe  # Macro to dock probe after calibration
#   Executes after calibration (e.g., detach probe).
 
[gcode_macro NOZZLE_BRUSH]
gcode:
    {% if printer.extruder.temperature < 200 %}
        M104 S200
    {% endif %}
    G90
    G1 Z16 F3000 # raise z to clear brush
    G1 X52 Y241 F6000 #starting coordinates of brush
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=200
    G1 Z6 F3000  #z height of scrub
    G1 X88 Y241 F10000 # end location of scrub
    G1 X52 F10000
    G1 X88 F10000
    G1 X52 F10000
    G1 X88 F10000
    G1 X52 F10000
    G1 X88 F10000
    G1 X52 F10000
    G1 X100 F10000 #final swipe and clear
    G1 Z16 F3000  #raise z to clear
    
[gcode_macro _Attach_Probe] #USE THIS TO REPLACE PROBE_OUT MACRO ONLY IN Z_CALIBRATION CONFIG
gcode:
    G90
    G1 X238 Z15 F4000 #X LOCATION TO PICK UP PROBE
    G4 P300
    # G1 Z15
    G1 X192 Y213 #X LOCATION OF PROBE BODY, USE X COORDINATE FROM SWITCH_XY_POSITION IN Z_CALIBRATION